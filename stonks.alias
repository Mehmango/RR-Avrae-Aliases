multiline
!embed
<drac2>
args = &ARGS&
title = "âŠ±ê•¥âŠ° ãƒ»Stocks Guideãƒ»âŠ±ê•¥âŠ° <:sans_wink:921803297503973476>"
desc = "**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
footer = ""
image = "https://i.kym-cdn.com/entries/icons/original/000/029/959/Screen_Shot_2019-06-05_at_1.26.32_PM.jpg" if randint(1,100) <= 1 else ""
debug = ""

INDUSTRY_MINIMUM_STOCK_VALUE = 10
INDUSTRY_PLAYER_STOCK_BUY_EFFECT = 0.005                # The percentage of an industry's stock's value that is gained when a player buys a stock
INDUSTRY_PLAYER_STOCK_SELL_EFFECT = 0.005               # The percentage of an industry's stock's value that is lost when a player sells a stock
INDUSTRY_MAX_TOTAL_PLAYER_STOCK_BUY_EFFECT = 1          # The maximum percentage of an industry's stock value that can be gained from players buying stocks
INDUSTRY_MAX_TOTAL_PLAYER_STOCK_SELL_EFFECT = 1         # The maximum percentage of an industry's stock value that can be lost from players selling stocks
INDUSTRY_BASELINE_STOCK_VALUE = 200
INDUSTRY_BASELINE_PULL_WEIGHT = 0.02                   # A factor affecting how much a stock's deviation from the baseline stock vlaue decreases further deviation from the baseline stock value
INDUSTRY_MAXIMUM_STOCK_VALUE_CHANGE_REDUCTION = 0.9     # The maximum percentage of change in a stock's value that can be overridden as a result of its deviation from the baseline stock value
INDUSTRY_NON_PREDICTED_STOCK_VALUE_CHANGE_DIVISION = 1.5  # The amount by which a stock value's change is divided if the report turns out to be wrong (The change is always a drop for a wrong positive report, and a rise for a wrong negative report)

CLAN_PLAYER_STOCK_BUY_EFFECT = 0.01                 # The percentage of a clan's stock's value that is gained when a player buys a stock
CLAN_PLAYER_STOCK_SELL_EFFECT = 0.01                  # The percentage of a clan's stock's value that is lost when a player sells a stock
CLAN_MAX_TOTAL_PLAYER_STOCK_BUY_EFFECT = 1.2        # The maximum percentage of a clan's stock value that can be gained from players buying stocks
CLAN_MAX_TOTAL_PLAYER_STOCK_SELL_EFFECT = 1.2       # The maximum percentage of a clan's stock value that can be lost from players selling stocks
CLAN_STOCK_STARTING_VALUE = 100                     # The starting value of a newly introduced clan's stock
CLAN_STOCK_STARTING_COUNT = 300                     # The starting count of a newly introduced clan's stock
CLAN_NON_PREDICTED_STOCK_VALUE_CHANGE_DIVISION = 1  # The amount by which a stock value's change is divided if the report turns out to be wrong (The change is always a drop for a wrong positive report, and a rise for a wrong negative report)

INTERACTIONS_PER_LEVEL = 2
# NUM_REFRESHES_BEFORE_INTERACTION_REFRESH = 1          # The number of refreshes until player interactions are refreshed

baseTimeFriday = 140400   # Number of seconds from the UNIX epoch that lines up with the server weekly reset time (Friday, 15:00 UTC)
baseTimeMonday = 399600   # Number of seconds from the UNIX epoch that lines up with the second stonks reset time (Monday, 15:00 UTC)
secondsInWeek = 604800
secondsInDay = secondsInWeek / 7

helpMessage = "\n\n**A little lost? Here's a guide for you! <:sans_wink:921803297503973476> **"
helpMessage += "\n\nâœ¦ `!stonks report` âŸ¶ Displays an up-to-date report of the whole stock market ðŸ“ˆ"
helpMessage += "\n\nâœ¦ `!stonks me` âŸ¶ Displays all your personal stocks :moneybag:"
helpMessage += "\n\nâœ¦ `!stonks buy <industry> [count]` âŸ¶ Purchase stocks from an industry! *(Eg: `!stonks buy arts 3`)* <:NezukoHappy:921798493478195200>"
helpMessage += "\n\nâœ¦ `!stonks sell <industry> [count]` âŸ¶ Sell an industry's stocks! *(Eg: `!stonks sell arts 2`)* <:nezukostare:921798265207402516>"

def isNewCycle(stonksState):
    lastRefreshTime = stonksState.get('lastRefreshTime', baseTimeMonday)
    debug += "last refresh time: " + lastRefreshTime 
    lastRefreshDay = floor((lastRefreshTime - baseTimeMonday) % secondsInWeek / secondsInDay)
    if lastRefreshDay < 4:
        # Last refresh was between monday and friday
        lastMondayTime = lastRefreshTime - (lastRefreshTime - baseTimeMonday) % secondsInWeek
        if time() > lastMondayTime + secondsInDay * 4:
            return True
        return False
    else:
        # Last refresh was between friday and monday
        lastFridayTime = lastRefreshTime - (lastRefreshTime - baseTimeFriday) % secondsInWeek
        if time() > lastFridayTime + secondsInDay * 3:
            return True
        return False
    
def isInteractionsRefreshed(refreshTime):
    refreshDay = floor((refreshTime - baseTimeMonday) % secondsInWeek / secondsInDay)
    return refreshDay >= 4  # Refresh is between friday and monday

if not combat():
    title = ":warning: Channel not in combat! :warning:"
    desc += "Ping @mehmango to help restore stonks."
else:
    try:
        stonksState = load_json(combat().get_metadata('stonksState'))
        stonksInfo = load_json(combat().get_metadata('stonksInfo'))
    except:
        err('Stonks data corrupted or missing! Ping @mehmango to help restore stonks.')
    #TODO: Add db locking to prevent race conditions
    
    worldState = stonksState.world
    worldInfo = stonksInfo.world
    industryState = stonksState.industries
    industryInfo = stonksInfo.industries
    clanState = stonksState.clans
    clanInfo = stonksInfo.clans
    # Sets up the player's object (data) if this is their first time running the alias. Also assigns them a unique player ID
    playerDict = load_json(character().get_cvar("stonks", {}))
    if not playerDict:
        oldPlayersDict = load_json(get_gvar('232847e9-2e6b-4a40-b269-8509077a2ad6'))
        if 'stonksPlayerId' in character().cvars and character().get_cvar('stonksPlayerId') in oldPlayersDict:
            #TODO For loading old stonks player data. Remove after some time.
            desc += "\n\n***Importing stonks profile from old stonks alias.***"
            oldPlayerDict = oldPlayersDict[character().get_cvar('stonksPlayerId')]
            character().delete_cvar('stonksPlayerId')
            playerDict.update({
                "interactions": level * INTERACTIONS_PER_LEVEL,
                "level": level,
                "stocks": oldPlayerDict.stocks
            })
        else:
            desc += "\n\n***Player stonks not found. Creating a new stonks profile.***"
            playerDict.update({
                "interactions": level * INTERACTIONS_PER_LEVEL,
                "level": level,
                "stocks": {}
            })

    oldLevel = playerDict.level
    newLevel = level
    if newLevel > oldLevel:
        playerDict.update(interactions=playerDict.interactions+(INTERACTIONS_PER_LEVEL*(newLevel-oldLevel)))
        playerDict.update(level=newLevel)
    
    # Refresh player stonks data
    lastRefreshTime = stonksState.get('lastRefreshTime', baseTimeMonday)
    if playerDict.get('refreshTime', 0) != lastRefreshTime:
        playerDict.update(refreshTime=lastRefreshTime)
        for stock in playerDict.stocks:
            playerDict.stocks[stock].update(stocksBoughtThisRefresh=0)
        if isInteractionsRefreshed(lastRefreshTime):
            playerDict.update(interactions=INTERACTIONS_PER_LEVEL*level)
            playerDict.update(refreshTime=lastRefreshTime)
        
    # Updates the player stonks dictionary with any new industries or clans
    for stock, state in (industryState | clanState).items():
        if stock not in playerDict.stocks or state.get('iteration', 0) != playerDict.stocks[stock].get('iteration', 0):
            playerDict.stocks.update({
                stock:{
                    "iteration": 0 if not state else state.get('iteration', 0),    # To identify the iteration of this particular stock (eg: how many times it's crashed and returned)
                    "count": 0,
                    "avgBoughtAt": 0,
                    "stocksBoughtThisRefresh": 0,
                        }
                })
    if isNewCycle(stonksState):
    # if True:
    # if len(args) > 0 and args[0].lower() == 'r':
        title = "âŠ±ê•¥âŠ° ãƒ»Refreshing the stock market...ãƒ»âŠ±ê•¥âŠ°"
            
        if isInteractionsRefreshed(time()):
            desc += "\n\n**Player interactions have been refreshed!** <:NezukoHappy:921798493478195200>"
        
        worldEvents = worldInfo.events
        currentWorldEvent = worldEvents[worldState.currentEvent]
        worldState.update(currentEvent=randint(0,len(worldEvents)))
        
        desc += "\n\n:globe_with_meridians: __**à¼ºà¼» World à¼ºà¼»**__ :globe_with_meridians:\n\n*" + worldInfo.events[worldState.currentEvent].hint + "*"
        
        desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
        desc += "\n\n**à¼ºà¼» :factory: INDUSTRIES :factory: à¼ºà¼»**"
        
        # Resetting and randomising hints and stock values for industries
        for industry, values in industryState.items():
            industryEvents = industryInfo[industry].events
            currentIndustryEvent = industryEvents[values.currentEvent]
            playerEffect = values.playerEffect
            oldStockValue = values.value
            worldEventEffect = oldStockValue*currentWorldEvent.effect if randint(1,100)/100 <= currentWorldEvent.effectChance else -(oldStockValue*currentWorldEvent.effect/INDUSTRY_NON_PREDICTED_STOCK_VALUE_CHANGE_DIVISION)   # Possible multiplication by current world event's stock effect based on effect chance
            industryEventEffect = oldStockValue*currentIndustryEvent.effect if randint(1,100)/100 <= currentIndustryEvent.effectChance else -(oldStockValue*currentIndustryEvent.effect/INDUSTRY_NON_PREDICTED_STOCK_VALUE_CHANGE_DIVISION)   # Possible effect by current industry event's stock effect based on effect chance
            randomEffect = oldStockValue * (randint(-5,5)/100)  # Random stock value fluctuation
            newStockValue = max((oldStockValue + industryEventEffect + worldEventEffect + randomEffect),    
                                INDUSTRY_MINIMUM_STOCK_VALUE) # Minimum value of a stock
            
            playerActionEffectTotal = 0
            if newStockValue < oldStockValue:
                if playerEffect < 0:   # Only apply value drop caused by players selling if the stock value drops
                    playerActionEffectTotal = (newStockValue - oldStockValue) * min(abs(playerEffect), INDUSTRY_MAX_TOTAL_PLAYER_STOCK_SELL_EFFECT)
                    newStockValue += playerActionEffectTotal
                if oldStockValue < INDUSTRY_BASELINE_STOCK_VALUE:    # Decreasing the stock value drop/rise based on how much higher/lower the stock value is compared to the baseline stock value
                    newStockValue += (oldStockValue - newStockValue) * min(INDUSTRY_BASELINE_PULL_WEIGHT * (INDUSTRY_BASELINE_STOCK_VALUE - oldStockValue), INDUSTRY_MAXIMUM_STOCK_VALUE_CHANGE_REDUCTION)
            elif newStockValue > oldStockValue:
                if playerEffect > 0:   # Only apply value rise caused by players buying if the stock value rises
                    playerActionEffectTotal = (newStockValue - oldStockValue) * min(abs(playerEffect), INDUSTRY_MAX_TOTAL_PLAYER_STOCK_BUY_EFFECT)
                    newStockValue += playerActionEffectTotal
                if oldStockValue > INDUSTRY_BASELINE_STOCK_VALUE:    # Decreasing the stock value drop/rise based on how much higher/lower the stock value is compared to the baseline stock value
                    newStockValue -= (newStockValue - oldStockValue) * min(INDUSTRY_BASELINE_PULL_WEIGHT * (oldStockValue - INDUSTRY_BASELINE_STOCK_VALUE), INDUSTRY_MAXIMUM_STOCK_VALUE_CHANGE_REDUCTION)
            
            
            newStockValue = round(max(newStockValue, INDUSTRY_MINIMUM_STOCK_VALUE), 2)
            
            values.update(value=newStockValue,
                                        currentEvent=randint(0,len(industryEvents)),
                                        playerEffect=0)

            desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
            desc += "\n\n" + industryInfo[industry].icon + " __**à¼ºà¼» " + " " + industry.title() + " à¼ºà¼»**__ " + industryInfo[industry].icon
            desc += "\n\n**âœ¦ Stock Value: `" + oldStockValue + "gp` â–º `" + values.value + "gp`**  " + ("ðŸ“ˆ" if oldStockValue <= values.value else ":chart_with_downwards_trend:")
            if (newStockValue > oldStockValue and playerEffect > 0) or (newStockValue < oldStockValue and playerEffect < 0):
                desc += "\n\n*Player actions contributed to an approximate `" + round(abs(playerActionEffectTotal), 2) + "gp` " + ("gain" if playerEffect >= 0 else "loss") + " in stock value this cycle!* " + ("<:HuTaoFingerGuns:939529495222841415>" if playerEffect >= 0 else "<:zyPaimonhehe:939528028097216592>") 
            # desc += "\n\n**âœ¦ Stocks Left: `" + values.stockCount + "`**"
            desc += "\n\n*" + industryInfo[industry].events[values.currentEvent].hint + "*"
            
        newClans = []
        desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
        desc += "\n\n**à¼ºà¼» :beginner: CLANS :beginner: à¼ºà¼»**"
        
        for clan, values in clanState.items():
            if values["active"] and clan not in newClans:
                clanEvents = clanInfo[clan]["events"]
                currentClanEvent = clanEvents[values["currentEvent"]]
                playerEffect = values["playerEffect"]
                oldStockValue = values["value"]
                dummy_old_stock_value = max(oldStockValue, 100)     # The value used to calculate fluctuations in stock value. Set to a minimum to prevent inconsequential changes when the stock value is very low
                worldEffect = dummy_old_stock_value * currentWorldEvent["effect"] if randint(1,100)/100 <= currentWorldEvent["effectChance"] else -(dummy_old_stock_value * currentWorldEvent["effect"] / CLAN_NON_PREDICTED_STOCK_VALUE_CHANGE_DIVISION) # Possible effect by current clan event's stock effect based on effect chance
                clanEffect = dummy_old_stock_value * currentClanEvent["effect"] if randint(1,100)/100 <= currentClanEvent["effectChance"] else -(dummy_old_stock_value * currentClanEvent["effect"] / CLAN_NON_PREDICTED_STOCK_VALUE_CHANGE_DIVISION) # Possible multiplication by current world event's stock effect based on effect chance
                randomEffect = dummy_old_stock_value * (randint(-5,5)/100)  # Random stock value fluctuation
                newStockValue = (oldStockValue + clanEffect + worldEffect + randomEffect)
                
                playerActionEffectTotal = 0
                if newStockValue < oldStockValue and playerEffect < 0:     # Only apply value drop caused by players selling if the stock value drops
                    playerActionEffectTotal = (newStockValue - oldStockValue) * min(abs(playerEffect), CLAN_MAX_TOTAL_PLAYER_STOCK_SELL_EFFECT)
                    newStockValue += playerActionEffectTotal
                elif newStockValue > oldStockValue and playerEffect > 0:   # Only apply value rise caused by players buying if the stock value rises
                    playerActionEffectTotal = (newStockValue - oldStockValue) * min(abs(playerEffect), CLAN_MAX_TOTAL_PLAYER_STOCK_BUY_EFFECT)
                    newStockValue += playerActionEffectTotal
                    
                newStockValue = round(newStockValue, 2)

                # For maocoin event
                if clan == 'maocoin' and newStockValue > 69000:
                    newStockValue = 0
                    clanState[clan].update(active=False)
                
                if newStockValue <= 0:  # Clan's stock has crashed, choose a new clan to replace it 
                    newClans.append(randchoice([clan for clan, values in clanState.items() if not values["active"] and clan not in newClans]))
                    clanState[clan].update(active=False)
                
                clanState[clan].update(value=newStockValue,
                                        currentEvent=randint(0,len(clanEvents)),
                                        playerEffect=0)
                
                desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
                desc += "\n\n" + clanInfo[clan]["icon"] + " __**à¼ºà¼» " + " " + clan.title() + " à¼ºà¼»**__ " + clanInfo[clan]["icon"]
                desc += "\n\n**âœ¦ Stock Value: `" + oldStockValue + "gp` â–º `" + values["value"] + "gp`**  " + ("ðŸ“ˆ" if oldStockValue <= values["value"] else ":chart_with_downwards_trend:")
                if (newStockValue > oldStockValue and playerEffect > 0) or (newStockValue < oldStockValue and playerEffect < 0):
                    desc += "\n\n*Player actions contributed to an approximate `" + round(abs(playerActionEffectTotal), 2) + "gp` " + ("gain" if playerEffect >= 0 else "loss") + " in stock value this cycle!* " + ("<:HuTaoFingerGuns:939529495222841415>" if playerEffect >= 0 else "<:zyPaimonhehe:939528028097216592>") 
                if newStockValue <= 0:
                    desc += "\n\n**" + clan.title() + "'s stock has CRASHED!** <:PL_ThisIsFine:939659376212459541>"
                else:
                    # desc += "\n\n**âœ¦ Stocks Left: `" + values["stockCount"] + "`**"
                    desc += "\n\n*" + clanInfo[clan]["events"][values["currentEvent"]]["hint"] + "*"
                    
        for clan, values in clanState.items():
            if clan in newClans:
                debug += "\nNew Clan: " + clan
                clanEvents = clanInfo[clan]["events"]
                currentClanEvent = randint(0,len(clanEvents))
                clanIteration = clanState[clan].get('iteration', 0) + 1
                clanState[clan].update(active=True, 
                                    value=CLAN_STOCK_STARTING_VALUE,
                                    stockCount=CLAN_STOCK_STARTING_COUNT,
                                    currentEvent=currentClanEvent,
                                    playerEffect=0,
                                    iteration=clanIteration)
                desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
                desc += "\n\n" + clanInfo[clan]["icon"] + " __**à¼ºà¼» " + " " + clan.title() + " à¼ºà¼»**__ " + clanInfo[clan]["icon"]
                desc += "\n\n**âœ¦ Stock Value: `" + CLAN_STOCK_STARTING_VALUE + "gp`**"
                # desc += "\n\n**âœ¦ Stocks Left: `" + CLAN_STOCK_STARTING_COUNT + "`**"
                desc += "\n\n*" + clanEvents[currentClanEvent]["hint"] + "*"
                
        stonksState.update(lastRefreshTime=time())
        
    elif len(args) > 0:
        if args[0].lower() == "report":
            title = "âŠ±ê•¥âŠ° ãƒ»This week's reportãƒ»âŠ±ê•¥âŠ°"
            
            desc += "\n\n:globe_with_meridians: __**à¼ºà¼» World à¼ºà¼»**__ :globe_with_meridians:\n\n*" + worldInfo.events[worldState.currentEvent].hint + "*"
            
            # Displaying data for all industries
            desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
            desc += "\n\n**à¼ºà¼» :factory: INDUSTRIES :factory: à¼ºà¼»**"
            for industry, values in industryState.items():
                desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
                desc += "\n\n" + industryInfo[industry].icon + " __**à¼ºà¼» " + " " + industry.title() + " à¼ºà¼»**__ " + industryInfo[industry].icon
                desc += "\n\n**âœ¦ Stock Value: `" + values.value + "gp`**"
                # desc += "\n\n**âœ¦ Stocks Left: `" + values.stockCount + "`**"
                desc += "\n\n*" + industryInfo[industry].events[values.currentEvent].hint + "*"
                
            # Displaying data for all clans
            desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
            desc += "\n\n**à¼ºà¼» :beginner: CLANS :beginner: à¼ºà¼»**"
            for clan, values in clanState.items():
                if values["active"]:
                    desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
                    desc += "\n\n" + clanInfo[clan].icon + " __**à¼ºà¼» " + " " + clan.title() + " à¼ºà¼»**__ " + clanInfo[clan].icon
                    desc += "\n\n**âœ¦ Stock Value: `" + values.value + "gp`**"
                    # desc += "\n\n**âœ¦ Stocks Left: `" + values.stockCount + "`**"
                    desc += "\n\n*" + clanInfo[clan].events[values.currentEvent].hint + "*"
                    
        elif args[0].lower() == "buy":
            
            title = "âŠ±ê•¥âŠ° ãƒ»" + name + " buys some stocks!ãƒ»âŠ±ê•¥âŠ°"
            
            # Checking for valid industry or clan input. Displays valid industry and clan inputs if input is invalid
            stockChoices = []
            if len(args) >= 2:
                stockOptions = [stock for stock in industryState | {clan:values for (clan,values) in clanState.items() if values["active"]}]
                stockChoices = [stock for stock in stockOptions if args[1].lower() in stock]
            if len(stockChoices) > 1:
                desc += "\n\n**More than one possible stock option found! Please be more specific. <:surprisedpikachu:921798527875702786>**"
                desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
                desc += "\n\n**__à¼ºà¼» <:catthinkemote:982075562606616608> Possible stocks <:catthinkemote:982075562606616608> à¼ºà¼»__**"
                for industry in industryState:
                    if industry in stockChoices:
                        desc += "\n\nâœ¦ " + industry.title() + " | " + industryInfo[industry].icon
                for clan, values in {clan:values for (clan,values) in clanState.items() if values["active"]}.items():
                    if values["active"] and clan in stockChoices:
                        desc += "\n\nâœ¦ " + clan.title() + " | " + clanInfo[clan]["icon"]
            elif len(stockChoices) < 1:
                desc += "\n\n**Please input a valid industry or clan to buy stocks in! <:surprisedpikachu:921798527875702786>**"
                desc += "\n\n*(Eg: `!stonks buy arts 4`)*"
                desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
                desc += "\n\n**__à¼ºà¼» :factory: Valid Industries :factory: à¼ºà¼»__**"
                for industry in industryState:
                    desc += "\n\nâœ¦ " + industry.title() + " | " + industryInfo[industry].icon
                desc += "\n\n**__à¼ºà¼» :beginner: Valid Clans :beginner: à¼ºà¼»__**"
                for clan, values in {clan:values for (clan,values) in clanState.items() if values["active"]}.items():
                    if values["active"]:
                        desc += "\n\nâœ¦ " + clan.title() + " | " + clanInfo[clan]["icon"]
                        
            else:
                stock = stockChoices[0]
                count = int(args[2]) if len(args) > 2 and args[2].isnumeric() else 1
                marketState = None
                stockBuyEffect = 0
                if stock in industryState:
                    marketState = industryState
                    marketInfo = industryInfo
                    stockBuyEffect = INDUSTRY_PLAYER_STOCK_BUY_EFFECT
                elif stock in clanState:
                    marketState = clanState
                    marketInfo = clanInfo
                    stockBuyEffect = CLAN_PLAYER_STOCK_BUY_EFFECT
                # stockCount = int(marketState[stock].stockCount)
                stockValue = marketState[stock].value
                coinPurse = character().coinpurse
                totalCoins = coinPurse.total
                interactionsNeeded = count
                stocksSoldThisRefresh = -min(playerDict.stocks[stock].stocksBoughtThisRefresh, 0)
                interactionsNeeded -= 2*(min(interactionsNeeded, stocksSoldThisRefresh))     # Refund interactions when buying stocks the player sold this refresh
                
                if count<1:
                    desc += "\n\n**You have to buy at least one stock, ya dingus! <:doge_kek:905836743289344031>**"
                    # desc += "\n\n--------------------------------------------"
                    # desc += "\n\n**" + marketState[stock].icon + " Stocks Left: `" + marketState[stock].stockCount + "`**"
                
                # elif stockCount < count:
                #     desc += "\n\n**There aren't enough " + stock.title() + " stocks for this purchase! <:surprisedpikachu:921798527875702786>**"
                #     desc += "\n\n--------------------------------------------"
                #     desc += "\n\n**" + marketState[stock].icon + " Stocks Left: `" + marketState[stock].stockCount + "`**"
                    
                elif stockValue*count > totalCoins:
                    desc += "\n\n**" + name + " does not have enough gold for this purchase! <:surprisedpikachu:921798527875702786>**"
                    desc += "\n\n--------------------------------------------"
                    desc += "\n\n**:moneybag: Required Gold: `" + stockValue*count + "`**"
                    desc += "\n\n**:moneybag: Available Gold: `" + str(totalCoins) + "`**"
                    
                elif interactionsNeeded > playerDict.interactions:
                    desc += "\n\n**" + name + " does not have enough interactions left for this purchase! <:surprisedpikachu:921798527875702786>**"
                    desc += "\n\n--------------------------------------------"
                    desc += "\n\n**<:nezukodead:921798440789377024> Interactions Left: `" + playerDict.interactions + "`**"
                    
                else:
                    # # Updates the industry or clan's stock count and stock value 
                    # marketState[stock].update(stockCount=stockCount-count,
                    #                             playerEffect = marketState[stock].playerEffect + round(stockBuyEffect*count,2))
                    
                    # Updates the industry or clan's stock value and the player action effect for the next refresh
                    marketState[stock].update(playerEffect = marketState[stock].playerEffect + (stockBuyEffect*count))
                    
                    # Updates player's coin pouch
                    coinPurse.modify_coins(gp=-(int(stockValue*count)))
                    footer += name + "'s Coin Pouch: " + str(totalCoins) + "gp -> " + str(coinPurse.get_coins().total) + "gp"
                    
                    playerDict.update(interactions=playerDict.interactions - interactionsNeeded)
                    playerDict.stocks[stock].update(
                        count=playerDict.stocks[stock].count + count, 
                        avgBoughtAt=round(((count*stockValue)+(playerDict.stocks[stock].avgBoughtAt*playerDict.stocks[stock].count))/(playerDict.stocks[stock].count+count), 2),
                        stocksBoughtThisRefresh=playerDict.stocks[stock].stocksBoughtThisRefresh+count)
                    
                    # Displays player and industry's updated data
                    desc += "\n\n**" + name + " successfully purchases `" + count + "` " + stock.title() + " stocks! <:tanjirowow:922537039524692088>**"
                    desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"                
                    desc += "\n\n**ðŸ’° " + name + "'s " + stock.title() + " stocks: `" + playerDict.stocks[stock].count + "`ðŸ’°**"
                    desc += "\n\n**<:nezukodead:921798440789377024> Interactions Left: `" + playerDict.interactions + "`**"
                    # desc += "\n\n--------------------------------------------"
                    # desc += "\n\n**âœ¦ Updated " + marketState[stock].icon + " " + industry.title() + " Stock Value: `" + marketState[stock].stockValue + "gp`**"
                    # desc += "\n**âœ¦ Updated " + marketState[stock].icon + " " + stock.title() + " Stock Count: `" + marketState[stock].stockCount + "`**"

        elif args[0].lower() == "sell":
            
            title = "âŠ±ê•¥âŠ° ãƒ»" + name + " sells some stocks!ãƒ»âŠ±ê•¥âŠ°"
            
            # Checking for valid industry or clan input. Displays valid industry and clan inputs if input is invalid
            stockChoices = []
            if len(args) >= 2:
                stockOptions = [stock for stock in industryState | {clan:values for (clan,values) in clanState.items() if values["active"]}]
                stockChoices = [stock for stock in stockOptions if args[1].lower() in stock]
            if len(stockChoices) > 1:
                desc += "\n\n**More than one possible stock option found! Please be more specific. <:surprisedpikachu:921798527875702786>**"
                desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
                desc += "\n\n**__à¼ºà¼» <:catthinkemote:982075562606616608> Possible stocks <:catthinkemote:982075562606616608> à¼ºà¼»__**"
                for industry in industryState:
                    if industry in stockChoices:
                        desc += "\n\nâœ¦ " + industry.title() + " | " + industryInfo[industry].icon
                for clan, values in {clan:values for (clan,values) in clanState.items() if values["active"]}.items():
                    if values["active"] and clan in stockChoices:
                        desc += "\n\nâœ¦ " + clan.title() + " | " + clanInfo[clan]["icon"]
            elif len(stockChoices) < 1:
                desc += "\n\n**Please input a valid industry or clan to sell stocks to! <:surprisedpikachu:921798527875702786>**"
                desc += "\n\n*(Eg: `!stonks sell arts 4`)*"
                desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
                desc += "\n\n**__à¼ºà¼» :factory: Valid Industries :factory: à¼ºà¼»__**"
                for industry in industryState:
                    desc += "\n\nâœ¦ " + industry.title() + " | " + industryInfo[industry].icon
                desc += "\n\n**__à¼ºà¼» :beginner: Valid Clans :beginner: à¼ºà¼»__**"
                for clan, values in clanState.items():
                    if values["active"]:
                        desc += "\n\nâœ¦ " + clan.title() + " | " + clanInfo[clan]["icon"]
                        
            else:
                stock = stockChoices[0]
                count = int(args[2]) if len(args) > 2 and args[2].isnumeric() else 1
                marketState = None
                stockSellEffect = 0
                if stock in industryState:
                    marketState = industryState
                    marketInfo = industryInfo
                    stockSellEffect = INDUSTRY_PLAYER_STOCK_SELL_EFFECT
                elif stock in clanState:
                    marketState = clanState
                    marketInfo = clanInfo
                    stockSellEffect = CLAN_PLAYER_STOCK_SELL_EFFECT
                
                playerStockCount = int(playerDict.stocks[stock].count if stock in playerDict.stocks else 0)
                stockValue = marketState[stock].value
                coinPurse = character().coinpurse
                totalCoins = coinPurse.total
                interactionsNeeded = count
                stocksBoughtThisRefresh = max(0, playerDict.stocks[stock].stocksBoughtThisRefresh)
                interactionsNeeded -= 2*(min(interactionsNeeded, stocksBoughtThisRefresh))     # Refund interactions when selling stocks the player bought this refresh
                
                if count<1:
                    desc += "\n\n**You have to sell at least one stock, ya dingus! <:doge_kek:905836743289344031>**"
                    desc += "\n\n--------------------------------------------"
                    desc += "\n\n**" + name + "'s " + marketInfo[stock].icon + " " + stock.title() + " Stocks: `" + playerStockCount + "`**" 

                elif count > playerStockCount:
                    desc += "\n\n**" + name + " does not have that many stocks to sell! <:surprisedpikachu:921798527875702786>**"
                    desc += "\n\n**--------------------------------------------**"
                    desc += "\n\n**" + name + "'s " + marketInfo[stock].icon + " " + stock.title() + " Stocks: `" + playerStockCount + "`**" 
                
                
                elif interactionsNeeded > playerDict.interactions:
                    desc += "\n\n**" + name + " does not have enough interactions left for this transaction! <:surprisedpikachu:921798527875702786>**"
                    desc += "\n\n--------------------------------------------"
                    desc += "\n\n**<:nezukodead:921798440789377024> Interactions Left: `" + playerDict.interactions + "`**"
                
                else:
                    playerDict.update(interactions=playerDict.interactions - interactionsNeeded)
                    playerDict.stocks[stock].update(count=playerDict.stocks[stock].count - count, stocksBoughtThisRefresh=playerDict.stocks[stock].stocksBoughtThisRefresh-count)
                    if playerDict.stocks[stock].count < 1:
                        playerDict.stocks[stock].update(avgBoughtAt=0)

                    # Updates player's coin pouch
                    coinPurse.modify_coins(gp=int(stockValue*count))
                    footer += name + "'s Coin Pouch: " + str(totalCoins) + "gp -> " + str(coinPurse.get_coins().total) + "gp"
                    
                    # # Updates industry or clan's data
                    # marketState[stock].update(stockCount = marketState[stock].stockCount+count,
                    #                             playerEffect = marketState[stock].playerEffect - round(stockSellEffect*count,2))

                    # Updates industry or clan's data
                    marketState[stock].update(playerEffect = marketState[stock].playerEffect - (stockSellEffect*count))
            

                    # Displays player and industry's updated data
                    desc += "\n\n**" + name + " successfully sells `" + count + "` " + stock.title() + " stocks! <:tanjirowow:922537039524692088>**"
                    desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"                
                    desc += "\n\n**ðŸ’° " + name + "'s " + stock.title() + " stocks: `" + playerDict.stocks[stock].count + "`ðŸ’°**"
                    desc += "\n\n**<:nezukodead:921798440789377024> Interactions Left: `" + playerDict.interactions + "`**"
                    # desc += "\n\n--------------------------------------------"
                    # desc += "\n\n**âœ¦ Updated " + marketState[stock].icon + " " + industry.title() + " Stock Value: `" + marketState[stock].stockValue + "gp`**"
                    # desc += "\n**âœ¦ Updated " + marketState[stock].icon + " " + stock.title() + " Stock Count: `" + marketState[stock].stockCount + "`**"
                    
        # elif args[0].lower() == "trade":
            
        #     title = "âŠ±ê•¥âŠ° ãƒ»" + name + " trades some stocks!ãƒ»âŠ±ê•¥âŠ°"
            
        #     if len(args)<2 or args[1] not in [player.name for player in playersDict.values()]:
        #         desc += "\n\n**Please input a valid name of a player to trade stocks to! <:surprisedpikachu:921798527875702786>**"
        #         desc += "\n\n*(Eg: `!stonks trade Bob arts 4`)*"
                        
        #     # Checking for valid industry or clan input. Displays valid industry and clan inputs if input is invalid
        #     if len(args)<3 or args[2].lower() not in [stock for stock in industryState | {clan:values for (clan,values) in clanState.items() if values["active"]}]:
        #         desc += "\n\n**Please input a valid industry or clan to trade stocks in! <:surprisedpikachu:921798527875702786>**"
        #         desc += "\n\n*(Eg: `!stonks trade Bob arts 4`)*"
        #         desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
        #         desc += "\n\n**__à¼ºà¼» :factory: Valid Industries :factory: à¼ºà¼»__**"
        #         for industry in industryState:
        #             desc += "\n\nâœ¦ " + industry.title() + " | " + industryInfo[industry].icon
        #         desc += "\n\n**__à¼ºà¼» :beginner: Valid Clans :beginner: à¼ºà¼»__**"
        #         for clan, values in clanState.items():
        #             if values["active"]:
        #                 desc += "\n\nâœ¦ " + clan.title() + " | " + values["icon"]
                        
        #     else:
        #         targetPlayerName = args[1]
        #         targetPlayerId = ""
        #         for id, values in playersDict.items():
        #             if values.name == targetPlayerName:
        #                 targetPlayerId = id
        #                 break;
                    
        #         stock = args[2].lower()
        #         count = int(args[3]) if len(args) > 3 and args[3].isnumeric() else 1
                
        #         if stock in industryState:
        #             marketState = industryState
        #         elif stock in clanState:
        #             marketState = clanState
        
        #         playerStockCount = int(playerDict.stocks[stock].count if stock in playerDict.stocks else 0)
                
        #         if count > playerStockCount:
        #             desc += "\n\n**" + name + " does not have that many stocks to trade! <:surprisedpikachu:921798527875702786>**"
        #             desc += "\n\n**--------------------------------------------**"
        #             desc += "\n\n**" + name + "'s " + marketState[stock].icon + " " + stock.title() + " Stocks: `" + playerStockCount + "`**" 
                
        #         elif count<1:
        #             desc += "\n\n**You have to trade at least one stock, ya dingus! <:doge_kek:905836743289344031>**"
        #             desc += "\n\n--------------------------------------------"
        #             desc += "\n\n**" + name + "'s " + marketState[stock].icon + " " + stock.title() + " Stocks: `" + playerStockCount + "`**"
                    
        #         else:
        #             playerDict.stocks[stock].update(count=playerDict.stocks[stock].count - count)
        #             playersDict[targetPlayerId].stocks[stock].update(count=playersDict[targetPlayerId].stocks[stock].count + count)
                    
        #             desc += "\n\n**" + name + " successfully trades `" + count + "` " + marketState[stock].icon + " " + stock.title() + " stocks to " + targetPlayerName + "! <:tanjirowow:922537039524692088>**"
        #             desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
        #             desc += "\n\n**ðŸ’° " + name + "'s " + stock.title() + " stocks: `" + playerDict.stocks[stock].count + "` ðŸ’°**"
        #             desc += "\n\n**ðŸ’° " + targetPlayerName + "'s " + stock.title() + " stocks: `" + playersDict[targetPlayerId].stocks[stock].count + "` ðŸ’°**"
                
        #             playerUpdated = True
                
        elif args[0].lower() == "me":
            
            title = "âŠ±ê•¥âŠ° ãƒ»" + name + " checks their stocks!ãƒ»âŠ±ê•¥âŠ°"
            desc += "\n\n**__à¼ºà¼» Stock Count: à¼ºà¼»__**"
            
            for stock, stockState in playerDict.stocks.items():
                stock = stock.lower()
                if stock in industryState:
                    marketState = industryState
                    marketInfo = industryInfo
                elif stock in clanState:
                    marketState = clanState
                    marketInfo = clanInfo
                    
                if not (marketState == clanState and not clanState[stock]["active"]):
                    desc += "\n\n**âœ¦ " + marketInfo[stock].icon + " " + stock.title() + " stocks:** `" + int(stockState.count) + "`"
                    desc += "\nâˆ˜  *Stocks purchased for an average of `" + round(stockState.avgBoughtAt, 2) + "gp`*"
                
            desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
            desc += "\n\n**<:nezukodead:921798440789377024> Interactions Left: `" + playerDict.interactions + "`**"
                
        else:
            desc = helpMessage
    else:
        desc = helpMessage
        
    desc += "\n\n**â‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ªâ‚ª**"
    
    if stonksState:
        combat().set_metadata('stonksState', dump_json(stonksState))
        character().set_cvar('stonksStateBackup', dump_json(stonksState))
    if playerDict:
        character().set_cvar('stonks', dump_json(playerDict))
                
return f""" -title "{title}" -desc "{desc}" -footer "{footer}" -image "{image}" """
</drac2>